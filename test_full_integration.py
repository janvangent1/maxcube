#!/usr/bin/env python3
"""
Full integration test for MAX! Cube Home Assistant integration
Tests the integration with actual Home Assistant modules
"""

import sys
import os
import logging
import traceback

# Activate the virtual environment
venv_python = os.path.join(os.path.dirname(__file__), 'homeassistant_dev', 'Scripts', 'python.exe')
if not os.path.exists(venv_python):
    print("‚ùå Home Assistant virtual environment not found!")
    print("Run: python setup_dev_env.py")
    sys.exit(1)

# Add the maxcube library to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'custom_components', 'maxcube'))

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_homeassistant_imports():
    """Test Home Assistant imports."""
    print("üîç Testing Home Assistant imports...")
    
    try:
        import homeassistant
        print("‚úÖ Home Assistant imported")
        
        from homeassistant.config_entries import ConfigEntry
        print("‚úÖ ConfigEntry imported")
        
        from homeassistant.core import HomeAssistant
        print("‚úÖ HomeAssistant core imported")
        
        from homeassistant.helpers.update_coordinator import DataUpdateCoordinator
        print("‚úÖ DataUpdateCoordinator imported")
        
        from homeassistant.components.climate import ClimateEntity
        print("‚úÖ ClimateEntity imported")
        
        from homeassistant.components.sensor import SensorEntity
        print("‚úÖ SensorEntity imported")
        
        from homeassistant.components.switch import SwitchEntity
        print("‚úÖ SwitchEntity imported")
        
        import voluptuous as vol
        print("‚úÖ Voluptuous imported")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Home Assistant import error: {e}")
        traceback.print_exc()
        return False

def test_integration_imports():
    """Test integration imports with Home Assistant available."""
    print("\nüîç Testing integration imports...")
    
    try:
        from custom_components.maxcube import const
        print("‚úÖ const.py imported successfully")
        
        from custom_components.maxcube import connection
        print("‚úÖ connection.py imported successfully")
        
        from custom_components.maxcube import cube
        print("‚úÖ cube.py imported successfully")
        
        from custom_components.maxcube import coordinator
        print("‚úÖ coordinator.py imported successfully")
        
        from custom_components.maxcube import config_flow
        print("‚úÖ config_flow.py imported successfully")
        
        from custom_components.maxcube import climate
        print("‚úÖ climate.py imported successfully")
        
        from custom_components.maxcube import sensor
        print("‚úÖ sensor.py imported successfully")
        
        from custom_components.maxcube import switch
        print("‚úÖ switch.py imported successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Integration import error: {e}")
        traceback.print_exc()
        return False

def test_config_flow_class():
    """Test config flow class instantiation."""
    print("\nüîç Testing config flow class...")
    
    try:
        from custom_components.maxcube.config_flow import ConfigFlow
        
        # Check if class exists and has required methods
        if not hasattr(ConfigFlow, 'async_step_user'):
            print("‚ùå ConfigFlow missing async_step_user method")
            return False
        
        if not hasattr(ConfigFlow, 'VERSION'):
            print("‚ùå ConfigFlow missing VERSION attribute")
            return False
        
        print("‚úÖ ConfigFlow class is valid")
        print(f"   Version: {ConfigFlow.VERSION}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Config flow error: {e}")
        traceback.print_exc()
        return False

def test_coordinator_class():
    """Test coordinator class."""
    print("\nüîç Testing coordinator class...")
    
    try:
        from custom_components.maxcube.coordinator import MaxCubeCoordinator
        
        # Check if class exists
        if not MaxCubeCoordinator:
            print("‚ùå MaxCubeCoordinator class not found")
            return False
        
        print("‚úÖ MaxCubeCoordinator class is valid")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Coordinator error: {e}")
        traceback.print_exc()
        return False

def test_maxcube_connection():
    """Test MAX! Cube connection."""
    print("\nüîç Testing MAX! Cube connection...")
    
    try:
        from custom_components.maxcube.connection import MaxCubeConnection
        from custom_components.maxcube.cube import MaxCube
        
        # Test connection to your cube
        connection = MaxCubeConnection("192.168.1.26", 62910)
        cube = MaxCube(connection)
        
        print("‚úÖ MAX! Cube connection successful")
        print(f"   RF Address: {cube.rf_address}")
        print(f"   Firmware: {cube.firmware_version}")
        print(f"   Devices: {len(cube.devices)}")
        print(f"   Rooms: {len(cube.rooms)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå MAX! Cube connection error: {e}")
        return False

def test_platform_functions():
    """Test platform setup functions."""
    print("\nüîç Testing platform functions...")
    
    try:
        from custom_components.maxcube import climate, sensor, switch
        
        # Check for async_setup_entry functions
        if not hasattr(climate, 'async_setup_entry'):
            print("‚ùå climate.py missing async_setup_entry function")
            return False
        
        if not hasattr(sensor, 'async_setup_entry'):
            print("‚ùå sensor.py missing async_setup_entry function")
            return False
        
        if not hasattr(switch, 'async_setup_entry'):
            print("‚ùå switch.py missing async_setup_entry function")
            return False
        
        print("‚úÖ All platform functions are valid")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Platform functions error: {e}")
        traceback.print_exc()
        return False

def main():
    """Run all tests."""
    print("üß™ MAX! Cube Home Assistant Integration Full Test")
    print("=" * 60)
    
    tests = [
        ("Home Assistant Imports", test_homeassistant_imports),
        ("Integration Imports", test_integration_imports),
        ("Config Flow Class", test_config_flow_class),
        ("Coordinator Class", test_coordinator_class),
        ("Platform Functions", test_platform_functions),
        ("MAX! Cube Connection", test_maxcube_connection),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã Running {test_name} test...")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} test PASSED")
        else:
            print(f"‚ùå {test_name} test FAILED")
    
    print("\n" + "=" * 60)
    print(f"üèÅ Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Integration is ready for Home Assistant.")
        print("\nüìã Next steps:")
        print("1. Commit and push to GitHub")
        print("2. Update Home Assistant")
        print("3. Add the integration")
    else:
        print("‚ö†Ô∏è Some tests failed. Fix the issues before deploying.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
